import os
import sys
from dateutil.parser import parse as date_parser
import requests
from requests.exceptions import HTTPError

# credential required to access the API
API_ACCESS_TOKEN = os.environ.get('API_ACCESS_TOKEN',None)

def verify_access_token():
    if API_ACCESS_TOKEN is None or API_ACCESS_TOKEN == "None":
        print ('API_ACCESS_TOKEN env not defined. Send us an email at info@exploitability.app if you need an access token. Exiting now.')
        return False
    return True

# the URL where the API is available
API_URL = 'https://api.exploitability.app'
# the maximum numebr of results that one API call will retreive, if that endpoint uses pagination
MAX_NUM_RESULTS_PER_PAGE = 500

'''
Download all Expected Exploitability predictions from a particular model on a particular date.
Params:
date - the date when these scores were computed; None will default to the day before yesterday, which represents the most recent score published
model - the model that was used to compute a score; None will default to prod3_2021_07_21, which is the most recently trained model
'''
def download_daily_scores(date=None,model=None):
    if not verify_access_token():
        return []

    headers = {}
    headers["access_token"] = API_ACCESS_TOKEN
    
    params = {}
    if date is not None:
        params['date'] = date.strftime('%Y-%m-%d')
    if model is not None:
        params['model'] = model
    params['per_page'] = MAX_NUM_RESULTS_PER_PAGE
    params['page'] = 1

    daily_endpoint_url = '%s/scores/daily' % (API_URL)

    print ('Downloading daily scores for model=%s & date=%s ...' % (model,date))
    
    all_results = []
    num_results = MAX_NUM_RESULTS_PER_PAGE
    while num_results == MAX_NUM_RESULTS_PER_PAGE:
        try:
            resp = requests.get(daily_endpoint_url, headers=headers, params = params)
            resp.raise_for_status()
            #if resp.status_code != 200:
            #    print (resp.status_code)
            #    print (resp.)
            data = resp.json()
            if params['page'] % 10 == 0:
                print ('Dwonloaded %d scores' % (params['page']*MAX_NUM_RESULTS_PER_PAGE))
            num_results = data['num_results']
            all_results += data['results']
            params['page'] += 1
        except HTTPError as e:
            print(f'HTTP error occurred: {e}')
            num_results = 0
        except BaseException as e:
            print(f'Other error occurred: {e}')
            num_results = 0

    print ('Done. Downloaded %s scores' % len(all_results))
    return all_results

